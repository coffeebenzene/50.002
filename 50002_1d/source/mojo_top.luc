module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output display_select[3][3], // 3x3 display selector to common anode. ACTIVE HIGH. output 1 for on.
    output display_digit[7], // 7seg display digits to segment cathode. ACTIVE LOW. output 0 for on.
    input arrow_btn[4],      // Arrow buttons. 0-up 1-down 2-left 3-right
    input start_game,        // Start/restart game button. Connected to reset.
    output win_led,
    output lose_led
  ) {
  
  sig rst;                  // reset signal
  sig arrow_press[4];          // arrow_btn after coditioning and edge detection.
  sig easy_numlist[10][4]; // array of 10 8-bits number for easy difficulty
  sig normal_numlist[10][4]; // array of 10 8-bits number for normal difficulty
  sig hard_numlist[10][4]; // array of 10 8-bits number for hard difficulty
  var i;
  var j;
  var empty_slots[8];
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    // For arrow_btn, ed detects rising edges, bc conditions input.
    edge_detector ed0(#RISE(1), #FALL(0));
    button_conditioner bc0;
    edge_detector ed1(#RISE(1), #FALL(0));
    button_conditioner bc1;
    edge_detector ed2(#RISE(1), #FALL(0));
    button_conditioner bc2;
    edge_detector ed3(#RISE(1), #FALL(0));
    button_conditioner bc3;
    
    .rst(rst) {
      //dff game_state[3][3][4](#INIT(36hfffffffff)); // Dunno if this is correct. need to test.
      dff game_state[3][3][4](#INIT(36h564582920)); // FOR TESTING.
                                                   // row/col are backwards: (1,2,3)(4,5,6)(7, ,8)
      dff new_tile_index1[4];
      dff new_tile_index2[4];
      dff new_tile_num[4];
      dff new_tile_pos[4];
      fsm game_step = { // Current step in game logic.
        WAIT_START,
        COUNT_EMPTY,
        MAKE_RAND1,
        MAKE_RAND2,
        SELECT_NUM,
        SELECT_POS,
        ADD_NUM,
        WAIT_INPUT,
        SHIFT,
        WIN,
        LOSE
      };
      
      fsm randint_step = { // Current step in randint generation
        BITMASK,
        MULTIPLY,
        EXTRACT
      };
      
      multiplex_display m_display;
      pn_gen rand_gen;
    }
  }
  
  alu alu;
  
  
  
  
  always {
    rand_gen.next = 1;
    
    // START: Fixed signals
    reset_cond.in = ~rst_n || start_game;   // input raw inverted reset signal. start_game also resets.
    rst = reset_cond.out;     // conditioned reset
    
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    rand_gen.seed = 128h843233523a613966423b622562592c62; // change to whatever you like
    easy_numlist = {4h1, 4h1,4h1,4h1,4h2,4h2,4h2,4h1,4h3,4h3};
    normal_numlist = {4h1, 4h1,4h1,4h2,4h2,4h2,4h2,4h4,4h3,4h3};
    hard_numlist = {4h1, 4h1,4h1,4h2,4h2,4h2,4h2,4h4,4h3,4h3};
    // END: Fixed signals
    
    
    
    // START: defaults
    game_state.d = game_state.q; // Needed to maintain state
    alu.alufn = 6b000000;
    alu.a = 8b0;
    alu.b = 8b0;
    led = 8b0;
    win_led = 1b0;
    lose_led = 1b0;
    
    bc0.in = arrow_btn[0];
    ed0.in = bc0.out;
    bc1.in = arrow_btn[1];
    ed1.in = bc1.out;
    bc2.in = arrow_btn[2];
    ed2.in = bc2.out;
    bc3.in = arrow_btn[3];
    ed3.in = bc3.out;
    
    arrow_press = c{ed3.out, ed2.out, ed1.out, ed0.out};
    //END: defaults
    
    
    
    // START: Display block
    m_display.game_state = game_state.q;
    display_select = m_display.display_select;
    display_digit = m_display.display_digit;
    // END: Display block
    
    
    //START: Game block
    case(game_step.q){
      game_step.WAIT_START:
        // FOR TESTING.
        if (arrow_press[0]){
          game_state.d[0][1] =  game_state.q[0][1] + 1;
        }
        if (arrow_press[1]){
          game_state.d[2][1] =  game_state.q[2][1] + 1;
        }
        if (arrow_press[2]){
          game_state.d[1][0] =  game_state.q[1][0] + 1;
        }
        if (arrow_press[3]){
          game_state.d[1][2] =  game_state.q[1][2] + 1;
        }
        
      game_step.COUNT_EMPTY:
        empty_slots = 8b00000000;
        for (i = 0; i < 3; i++) {
          for(j=0; j < 3; j++) {
            if (game_state.q[i][j] == 4b1111) {
              empty_slots = empty_slots + 8b00000001;
            }
          }
        }
        if (empty_slots == 8b00000000) { // you've lost the game
        }
        else { // go make some randint
        }
      game_step.MAKE_RAND1:
        case(randint_step.q) {
          randint_step.BITMASK: // shift right by 4
            alu.a = rand_gen.num[20:13];
            alu.b = 8b00000100;
            alu.alufn = 6b100001;
          randint_step.MULTIPLY: // multiply by 10
            alu.alufn = 6b000010;
            alu.a = alu.out; // I need to convert this to binary point but idk how
            alu.b = 8b00001010;
          randint_step.EXTRACT:
            new_tile_index1.d = alu.out[7:4]; // store 4 highest bits into new_tile_num
        }
        game_state.d = game_state.q; // null op
      game_step.MAKE_RAND2:
        case(randint_step.q) {
          randint_step.BITMASK: // shift right by 4
            alu.a = rand_gen.num[20:13];
            alu.b = 8b00000100;
            alu.alufn = 6b100001;
          randint_step.MULTIPLY: // multiply by 10
            alu.alufn = 6b000010;
            alu.a = alu.out; // I need to convert this to binary point but idk how
            alu.b = empty_slots;
          randint_step.EXTRACT:
            new_tile_index2.d = alu.out[7:4]; // store 4 highest bits into new_tile_num
        }
        game_state.d = game_state.q; // null op
      game_step.SELECT_NUM:
        new_tile_index1.d = new_tile_index1.q; // preserve for subsequent cycles
        new_tile_index2.d = new_tile_index2.q;
        new_tile_num.d = easy_numlist[new_tile_index1.q];
        
        game_state.d = game_state.q; // null op
      game_step.SELECT_POS: // TODO: This method of choosing position is not correct fix later
        new_tile_num.d = new_tile_num.q;
        new_tile_pos.d = game_state.q[0][new_tile_index2.q]; // TODO: Change 0 to real index based on arrow press
        
        game_state.d = game_state.q; // null op
      game_step.ADD_NUM:
        game_state.d = game_state.q; // null op
      game_step.WAIT_INPUT:
        game_state.d = game_state.q; // null op
      game_step.SHIFT:
        game_state.d = game_state.q; // null op
      game_step.WIN:
        win_led = 1b1;
      game_step.LOSE:
        lose_led = 1b1;
    }

    //START: Game block TODO: Implement real FSM
    
    // State 1 : Generate new tile value
    
    // END State 1
    
    // State 2 : Put tile inside grid
    // END State 2
    
    // State 3 : Read button input
    // END State 3
    
    // State 4 : Shift grid
    // END State 4
    
    // END: Game block
  }
}