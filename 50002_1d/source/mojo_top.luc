global Alufn{
  const ADD   = 6b000000;
  const SUB   = 6b000001;
  const MUL   = 6b000010;
  const AND   = 6b011000;
  const OR    = 6b011110;
  const XOR   = 6b010110;
  const A     = 6b011010;
  const SHL   = 6b100000;
  const SHR   = 6b100001;
  const SRA   = 6b100011;
  const CMPEQ = 6b110011;
  const CMPLT = 6b110101;
  const CMPLE = 6b110111;
}

module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output display_select[3][3], // 3x3 display selector to common anode. ACTIVE HIGH. output 1 for on.
    output display_digit[7], // 7seg display digits to segment cathode. ACTIVE LOW. output 0 for on.
    input arrow_btn[4],      // Arrow buttons. 0-up 1-down 2-left 3-right
    input start_game,        // Start/restart game button. Connected to reset.
    output win_led,
    output lose_led,
    output difficulty_led[2]     // one-hot. 2b01 for normal, 2b10 for hard.
  ) {
  
  sig rst;                  // reset signal
  sig zero;                 // fixed 1bit 0.
  sig arrow_press[4];          // arrow_btn after coditioning and edge detection.
  sig normal_numlist[8][4]; // array of 8 numbers for normal difficulty
  sig hard_numlist[8][4]; // array of 8 numbers for hard difficulty
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    // For arrow_btn, ed detects rising edges, bc conditions input.
    edge_detector ed0(#RISE(1), #FALL(0));
    button_conditioner bc0;
    edge_detector ed1(#RISE(1), #FALL(0));
    button_conditioner bc1;
    edge_detector ed2(#RISE(1), #FALL(0));
    button_conditioner bc2;
    edge_detector ed3(#RISE(1), #FALL(0));
    button_conditioner bc3;
    
    counter randseed(.rst(zero), #SIZE(32)); // unresettable counter.
    
    .rst(rst) {
      //dff game_state[3][3][4](#INIT(36hfffffffff)); // row/col are backwards: 36h123456789
                                                      // is (9,8,7)(6,5,4)(3,2,1)
      // Global variables
      dff game_state[3][3][4](#INIT(36h98f9ff885)); // FOR TESTING.
                                                    // row/col are backwards: (1,2,3)(4,5,6)(7, ,8)
      dff difficulty[2];
      dff rowindex[2]; // Common registers for indexing row/col.
      dff colindex[2];
      dff empty_slots[4]; // number of empty tiles.
      dff numlist[8][4]; // List of numbers to pick from.
                         // 8 numbers for uniform distribution of prng.
      dff new_num[4];
      dff new_pos[2][2]; // new_pos[0] is row new_pos[1] is col.
      
      fsm game_step = { // Current step in game logic.
        START,
        COUNT_EMPTY,
        CHECK_LOSE,
        MAKE_RAND1,
        MAKE_RAND2,
        SELECT_NUM,
        SELECT_POS,
        ADD_NUM,
        WAIT_INPUT,
        SHIFT,
        CHECK10,
        WIN,
        LOSE
      };
      
      // Randint variables
      dff randint1[3];
      dff randint2[4];
      dff randint_temp[8];
      fsm randint_step = { // Current substep in randint generation
        BITMASK,
        MULTIPLY,
        EXTRACT
      };
      
      // Shift variables
      dff shift_direction[2];
      dff shift_line[2];
      dff shift_i[2];
      dff shift_row[3][4]; // working row for row collation
      dff shift_row_pointer[2]; // Destination pointer for row collation
      fsm shift_step = { // substep in row/col shifting.
        COLLATE_OUT1, // collate out to working row
        COLLATE_OUT2,
        COLLATE_OUT3,
        COLLATE_OUT4,
        COMPARE,
        COLLATE_IN1, // collate back in to game state.
        COLLATE_IN2,
        COLLATE_IN3,
        INCREMENT
      };
      
      multiplex_display m_display;
      pn_gen rand_gen;
    }
  }
  
  alu alu;
  encoder direction_enc(#WIDTH(4));
  
  
  
  always {
    rand_gen.next = 1;
    
    // START: Fixed signals
    reset_cond.in = ~rst_n || start_game;   // input raw inverted reset signal. start_game also resets.
    rst = reset_cond.out;     // conditioned reset
    
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port

    zero = 1b0;
    
    rand_gen.seed = randseed.value; // Seed based on absolute time.
    
    normal_numlist = {4h0,4h0,4h0,4h0,4h1,4h1,4h1,4h2};
    hard_numlist = {4h0,4h0,4h1,4h1,4h1,4h2,4h2,4h3};
    // END: Fixed signals
    
    
    
    // START: defaults
    game_state.d = game_state.q; // Needed to maintain state
    rowindex.d = rowindex.q;
    colindex.d = colindex.q;
    empty_slots.d = empty_slots.q;
    numlist.d = numlist.q;
    randint1.d = randint1.q;
    randint2.d = randint2.q;
    
    alu.alufn = 6b000000;
    alu.a = 8b0;
    alu.b = 8b0;
    led = 8b0;
    win_led = 1b0;
    lose_led = 1b0;
    
    bc0.in = arrow_btn[0];
    ed0.in = bc0.out;
    bc1.in = arrow_btn[1];
    ed1.in = bc1.out;
    bc2.in = arrow_btn[2];
    ed2.in = bc2.out;
    bc3.in = arrow_btn[3];
    ed3.in = bc3.out;
    arrow_press = c{ed3.out, ed2.out, ed1.out, ed0.out};
    direction_enc.in = arrow_press;
    //END: defaults
    
    
    
    // START: Display block
    m_display.game_state = game_state.q;
    display_select = m_display.display_select;
    display_digit = m_display.display_digit;
    
    difficulty_led = difficulty.q;
    // END: Display block
    
    
    
    //START: Game block
    case(game_step.q){
      game_step.START:
        if(|arrow_press){
          numlist.d =  hard_numlist;
          difficulty.d = 2b10;
        } else {
          numlist.d =  normal_numlist;
          difficulty.d = 2b01;
        }
        rowindex.d = 2d0;
        colindex.d = 2d0;
        empty_slots.d = 4d0;
        game_step.d = game_step.COUNT_EMPTY;
        
      game_step.COUNT_EMPTY:
        // Check if slot is empty.
        alu.a = c{ 4h0, game_state.q[rowindex.q][colindex.q] };
        alu.b = 8h0f;
        alu.alufn = Alufn.CMPEQ;
        if (alu.out){
		       empty_slots.d = empty_slots.q + 1;
        }
        // Advance to next slot, or go to next step if done.
        rowindex.d = rowindex.q + 1;
        if (rowindex.q == 2){ // if row is at 2, instead of incrementing, reset to 0.
          rowindex.d = 0;
          
          colindex.d = colindex.q + 1;
          if (colindex.q == 2){ // End of check. Next step.
            colindex.d = 0;
            game_step.d = game_step.CHECK_LOSE;
            
          }
        }
      
      game_step.CHECK_LOSE:
        alu.a = c{ 4h0, empty_slots.q };
        alu.b = 8h00;
        alu.alufn = Alufn.CMPEQ;
        if (alu.out){
		       game_step.d = game_step.LOSE;
        } else {
          randint1.d = 0;
          randint2.d = 0;
          game_step.d = game_step.MAKE_RAND1;
          randint_step.d = randint_step.BITMASK;
        }
        
      game_step.MAKE_RAND1: // Get random integer to select number from numlist
        // numlist is chosen to be length 8 so that 3 bits can simply be bitmasked.
        alu.a = rand_gen.num[7:0];
        alu.b = 8b00000111;
        alu.alufn = Alufn.AND;
        randint1.d = alu.out[2:0];
        game_step.d = game_step.MAKE_RAND2;
        randint_step.d = randint_step.BITMASK;
        
      game_step.MAKE_RAND2: // Get random integer for empty slot to add number.
        // How randint works:
        // The PRNG generates random bits, we want a random integer. The range may vary.
        // The random integer fits within 4bits (range is max 0-9)
        // Thus, we create an virtual decimal point after bit 4,
        // and multiply the fractional part by the range to get a random integer.
        // As random bits, the fractional part should also be approx 
        //   uniformly distributed, up to the precision of bits in fractional part.
        // 1. Bitmasking is first used to remove the integer part.
        // 2. Multiply by range.
        // 3. Extract the integer part by shift right number of fractional bits.
        case(randint_step.q) {
          randint_step.BITMASK: // Bitmask out upper 4 bits of PRNG.
            alu.a = rand_gen.num[7:0];
            alu.b = 8b00001111;
            alu.alufn = Alufn.AND;
            randint_temp.d = alu.out;
            randint_step.d = randint_step.MULTIPLY;
            
          randint_step.MULTIPLY: // Multiply by number of empty_slots.
            alu.a = randint_temp.q;
            alu.b = empty_slots.q;
            alu.alufn = Alufn.MUL;
            randint_temp.d = alu.out;
            randint_step.d = randint_step.EXTRACT;
            
          randint_step.EXTRACT: // Extract randint by shifting.
            alu.a = randint_temp.q;
            alu.b = 8d4;
            alu.alufn = Alufn.SHR;
            randint2.d = alu.out[3:0];
            game_step.d = game_step.SELECT_NUM;
        }
        
      game_step.SELECT_NUM: // Select the new number to insert.
        new_num.d = numlist.q[randint1.q];
        rowindex.d = 2d0;
        colindex.d = 2d0;
        game_step.d = game_step.SELECT_POS;
        
      game_step.SELECT_POS: // Select the new tile position by counting.
        // Check if slot is empty.
        alu.a = c{ 4h0, game_state.q[rowindex.q][colindex.q] };
        alu.b = 8h0f;
        alu.alufn = Alufn.CMPEQ;
        if (alu.out){
		       if (randint2.q==0){
            new_pos.d[0] = rowindex.q;
            new_pos.d[1] = colindex.q;
          }
          randint2.d = randint2.q-1;
        }
        // Advance to next slot, or go to next step if done.
        rowindex.d = rowindex.q + 1;
        if (rowindex.q == 2){ // if row is at 2, instead of incrementing, reset to 0.
          rowindex.d = 0;
          
          colindex.d = colindex.q + 1;
          if (colindex.q == 2){ // End of check. Next step.
            colindex.d = 0;
            game_step.d = game_step.ADD_NUM;
          }
        }
        
      game_step.ADD_NUM:
        game_state.d[new_pos.q[0]][new_pos.q[1]] = new_num.q;
        game_step.d = game_step.WAIT_INPUT;
        
      game_step.WAIT_INPUT:
        if(|arrow_press){
          shift_direction.d = direction_enc.out;
          game_step.d = game_step.SHIFT;
          shift_step.d = shift_step.COLLATE_OUT1;
          shift_line.d = 0;
        }
      
      // START: Shift board state. complicated state deserves it's own start and end.
      game_step.SHIFT:
        shift_direction.d = shift_direction.q;
        shift_line.d = shift_line.q;
        shift_i.d = shift_i.q;
        shift_row.d = shift_row.q;
        shift_row_pointer.d = shift_row_pointer.q;
        
        case(shift_step.q){
          
          shift_step.COLLATE_OUT1: // Setup collating variables. BEFORE loop
            shift_row.d = {4hf,4hf,4hf};
            shift_row_pointer.d = 0;
            shift_i.d = 0;
            shift_step.d = shift_step.COLLATE_OUT2;
            
          shift_step.COLLATE_OUT2: // Setup row/col indexes for loop. INSIDE loop
            case (shift_direction.q){
              0: // Up
                rowindex.d = shift_i.q;
                colindex.d = shift_line.q;
              1: // Down
                rowindex.d = 2 - shift_i.q;
                colindex.d = shift_line.q;
              2: // Left
                rowindex.d = shift_line.q;
                colindex.d = shift_i.q;
              3: // Right
                rowindex.d = shift_line.q;
                colindex.d = 2 - shift_i.q;
            }
            shift_step.d = shift_step.COLLATE_OUT3;
            
          shift_step.COLLATE_OUT3: // Do collation. INSIDE loop
            alu.a = c{ 4h0, game_state.q[rowindex.q][colindex.q] };
            alu.b = 8h0f;
            alu.alufn = Alufn.CMPEQ;
            if (alu.out==0){ // if num != 0xf
              shift_row.d[shift_row_pointer.q] = game_state.q[rowindex.q][colindex.q];
              game_state.d[rowindex.q][colindex.q] = 4hf; // also clear cell for COLLATE_IN later.
              shift_row_pointer.d = shift_row_pointer.q + 1;
            }
            shift_step.d = shift_step.COLLATE_OUT4;
            
          shift_step.COLLATE_OUT4: // Loop check for collate out.
            shift_i.d = shift_i.q + 1;
            shift_step.d = shift_step.COLLATE_OUT2;
            if (shift_i.q==2){
              shift_step.d = shift_step.COMPARE;
            }
          
          
          shift_step.COMPARE:
            // If row is empty, skip
            // Otherwise, compare adjacent cells. If they're the same, combine.
            // In general case, should be a loop, but for 3x3, 2 if statements is enough.
            if (shift_row.q[0] == shift_row.q[1] && shift_row.q[0] != 4hf) {
              alu.a = c{ 4h0, shift_row.q[0] };
              alu.b = 8h01;
              alu.alufn = Alufn.ADD;
              shift_row.d[0] = alu.out[3:0];
              shift_row.d[1] = 4hf;
            } else if (shift_row.q[1] == shift_row.q[2] && shift_row.q[1] != 4hf) {
              alu.a = c{ 4h0, shift_row.q[1] };
              alu.b = 8h01;
              alu.alufn = Alufn.ADD;
              shift_row.d[1] = alu.out[3:0];
              shift_row.d[2] = 4hf;
            }
            shift_step.d = shift_step.COLLATE_IN1;
          
          
          shift_step.COLLATE_IN1: // Setup collating variables. BEFORE loop
            shift_row_pointer.d = 0;
            shift_i.d = 0;
            shift_step.d = shift_step.COLLATE_IN2;
          
          shift_step.COLLATE_IN2: // Do collation. INSIDE loop
            alu.a = c{ 4h0, shift_row.q[shift_i.q] };
            alu.b = 8h0f;
            alu.alufn = Alufn.CMPEQ;
            if (alu.out==0){ // if num != 0xf
              case (shift_direction.q){
                0: // Up
                  game_state.d[shift_row_pointer.q][shift_line.q] = shift_row.q[shift_i.q];
                1: // Down
                  game_state.d[2-shift_row_pointer.q][shift_line.q] = shift_row.q[shift_i.q];
                2: // Left
                  game_state.d[shift_line.q][shift_row_pointer.q] = shift_row.q[shift_i.q];
                3: // Right
                  game_state.d[shift_line.q][2-shift_row_pointer.q] = shift_row.q[shift_i.q];
              }
              shift_row_pointer.d = shift_row_pointer.q + 1;
            }
            shift_step.d = shift_step.COLLATE_IN3;
          
          shift_step.COLLATE_IN3: // Loop check for collate in.
            shift_i.d = shift_i.q + 1;
            shift_step.d = shift_step.COLLATE_IN2;
            if (shift_i.q==2){
              shift_step.d = shift_step.INCREMENT;
            }
          
          
          shift_step.INCREMENT:
            shift_line.d = shift_line.q + 1;
            if(shift_line.q == 2){
              game_step.d = game_step.CHECK10;
              rowindex.d = 2d0;
              colindex.d = 2d0;
            } else {
              shift_step.d = shift_step.COLLATE_OUT1;
            }
        
        }
      // END: Shift board state
      
      game_step.CHECK10:
        rowindex.d = rowindex.q + 1;
        if (rowindex.q == 2){ // if row is at 2, instead of incrementing, reset to 0.
          rowindex.d = 0;
          
          colindex.d = colindex.q + 1;
          if (colindex.q == 2){ // End of check. Next step.
            colindex.d = 0;
            empty_slots.d = 4d0;
            game_step.d = game_step.COUNT_EMPTY;
          }
        }
        
        alu.a = 8d10;
        alu.b = c{ 4h0, game_state.q[rowindex.q][colindex.q] };
        alu.alufn = Alufn.CMPLE;
        if (alu.out){ // Needs to be at bottom to overwrite COUNT_EMPTY if at [2][2]
		       if (game_state.q[rowindex.q][colindex.q] != 4hf){
			       game_step.d = game_step.WIN;
			     }
        }
        
      game_step.WIN:
        win_led = 1b1;
        
      game_step.LOSE:
        lose_led = 1b1;
    }
    // END: Game block
  }
}