module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output display_select[3][3], // 3x3 display selector to common anode. ACTIVE HIGH. output 1 for on.
    output display_digit[7], // 7seg display digits to segment cathode. ACTIVE LOW. output 0 for on.
    input arrow_btn[4],      // Arrow buttons. TODO: Will need to encode or prioritise or debounce etc.
    input start_game,         // Start/restart game button. Connected to reset.
    output win_led,
    output lose_led
  ) {
  
  sig rst;                  // reset signal
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      //dff game_state[3][3][4](#INIT(36hfffffffff)); // Dunno if this is correct. need to test.
      dff game_state[3][3][4](#INIT(36hf7654321)); // FOR TESTING.
                                                   // row/col are backwards: (1,2,3)(4,5,6)(7, ,0)
      fsm game_step = {INITIAL,TESTING,END}; // Current step in game logic.
      
      multiplex_display m_display;
    }
  }
  
  alu alu;
  
  
  always {
    
    // START: Fixed signals
    reset_cond.in = ~rst_n || start_game;   // input raw inverted reset signal. start_game also resets.
    rst = reset_cond.out;     // conditioned reset
    
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    // END: Fixed signals
    
    
    
    // START: defaults
    game_state.d = game_state.q; // Needed to maintain state
    alu.alufn = 6b000000;
    alu.a = 8b0;
    alu.b = 8b0;
    led = 8b0;
    win_led = 1b0;
    lose_led = 1b0;
    //END: defaults
    
    
    
    // START: Display block
    m_display.game_state = game_state.q;
    display_select = m_display.display_select;
    display_digit = m_display.display_digit;
    // END: Display block
    
    
    
    //START: Game block
    
    // END: Game block
  }
}