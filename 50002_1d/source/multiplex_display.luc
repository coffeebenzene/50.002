module multiplex_display (
    input clk,  // clock
    input rst,  // reset
    input game_state[3][3][4], // 3x3 array of 4bit digits.
    output display_select[3][3], // 3x3 display selector to common anode. ACTIVE HIGH. output 1 for on.
    output display_digit[7] // 7seg display digits to segment cathode. ACTIVE LOW. output 0 for on.
  ) {

  .clk(clk), .rst(rst) {
    dff row[2];
    dff col[2];
    // edge-high every 2^15cycles -> 50MHz/2^15 ~= 3051Hz
    // full display cycle is 3051Hz/9 -> 339Hz > 240 Hz for no flicker
    // If you concentrate and it is dim, flicker is visible at lower freq. (unfortunately)
    counter counter(#SIZE(1), #DIV(14));
  }
  
  edge_detector edge_detector(.clk(clk), #RISE(1), #FALL(0));
  seven_seg seg_map;
  
  always {
    edge_detector.in = counter.value; // Need to delay the switching to allow led/registers to stabilise.
    if (edge_detector.out == 1){
      // row and col incrementer. Loops through by row first, then by col.
      // ie. display top-down then left-right (1,4,7)(2,5,8)(3,6,9)
      row.d = row.q + 1;
      if (row.q == 2){ // if row/col is at 2, instead of incrementing, reset to 0.
        row.d = 0;
        
        col.d = col.q + 1; // col increments only if row resets.
        if (col.q == 2){
          col.d = 0;
        }
      }
    }
    
    display_select = {3b0,3b0,3b0}; // One hot display_select
    display_select[row.q][col.q] = 1b1;
    
    seg_map.char = game_state[row.q][col.q]; // display digit.
    display_digit = ~seg_map.segs[6:0]; // invert for active low.
                                        // Takes only the bottom 7 bits. (decimal point not used.)
  }
}